@model PhotoHistory.Models.AlbumModel
@{    
    // no nie moglem tego inaczej zrobic
    List<PhotoHistory.Models.PhotoModel> photosSorted = new List<PhotoHistory.Models.PhotoModel>(Model.Photos);
    photosSorted.Sort((x, y) => x.Date.CompareTo(y.Date));
}
<script src="@(Url.Content("~/Scripts/roundabout/jquery.roundabout.js"))"></script>
<script src="@(Url.Content("~/Scripts/roundabout/jquery.event.drag-2.0.min.js"))"></script>
<script src="@(Url.Content("~/Scripts/roundabout/jquery.event.drop-2.0.min.js"))"></script>
<div id="content">
    <div id="album-header">
        <h1 class="page-title">
            <a href="#">@Model.Name</a>
            <!-- follow/unfollow - brak dla wlasciciela -->
            @if (Model.User != @ViewBag.user)
            {
                if (Helpers.isFollower(Model, ViewBag.user))
                {
                <button class="btn btn-warning" name="follow_button" value="true">
                    <i class="icon-remove icon-white"></i> Unfollow</button>
                }
                else
                {
                <button class="btn btn-info" name="follow_button" value="false">
                    <i class="icon-ok icon-white"></i> Follow</button>
                }

            }
            @if (Model.User == @ViewBag.user)
            {
                <!-- jesli jest wlascicielem: manage this album -->
                <a href="@Url.Action("ManageAlbum", new { id = Model.Id })">
                    <button class="btn btn-primary">
                        <i class="icon-edit icon-white"></i>Manage this album</button>
                </a>
            }
        </h1>
        <h2 class="album-author">
            by <a href="@Url.Action("ViewProfile", "User", new { userName = Model.User.Login })">@Model.User.Login</a></h2>
    </div>


    <!-- SLIDESHOW -->
    @if (Model.Photos.Count() >= 3)
    {
        <div style="height: 430px; overflow: hidden;">
            <ul id="roundabout" style="width: 450px;">
                @for (int i = 0; i < photosSorted.Count(); i++)
                {
                    var photo = photosSorted[i];
                    <li description="@photo.Description" title="@(i + 1). @photo.Date.ToLongDateString() ">
                        <img src="@photo.Path" date="@photo.Date.ToShortDateString()"   />
                    </li>
                }
            </ul>
        </div>
            
                
        <div class="toggle-autoplay">
            <img src="../../Content/img/Play Icon.jpg" />
            Start/stop autoplay
        </div>
        <div id="photo-desc-replace">
        </div>
        <div>
            <table class="controls" cellpadding="6">
                <tr>
                    <td onclick="move(-365);">
                        Previous year <<<<
                    </td>
                    <td onclick="move(-30);">
                        Previous month <<<
                    </td>
                    <td onclick="move(-7);">
                        Previous week <<
                    </td>
                    <td onclick="move(-1);">
                        Previous day <
                    </td>
                    <td>
                    </td>
                    <td onclick="move(1);">
                        Next day >
                    </td>
                    <td onclick="move(7);">
                        Next week >>
                    </td>
                    <td onclick="move(30);">
                        Next month >>>
                    </td>
                    <td onclick="move(365);">
                        Next year >>>>
                    </td>
                </tr>
            </table>
        </div>
    }
    else
    {
        <div style="height: 300px; ">
        <h3>
            You need at least 3 photos to see a presentation.
        </h3>
        </div>
    }
    <!-- END SLIDESHOW -->

    <div style="height: 20px;">
    </div>
    <div id="content-left">
        <div id="album-footer">
            <div id="album-desc">
                @Model.Description
            </div>
            <div id="album-rate">
                <!-- Ajax requests -->
                Rating: <span class="album-rating">@Model.getRating()</span> <a class="vote" data-up="true"
                    href="#"><span class="label label-success">+1</span></a> <a class="vote" data-up="false"
                        href="#"><span class="label label-important">-1</span></a>
            </div></br>
                <div class="album-followers">
        @if (Model.Followers.Count > 0)
        {
            <h2 class="followers">Followers:</h2>
                foreach (PhotoHistory.Models.UserModel user in Model.Followers)
                {
                <a href="@Url.Action("ViewProfile", "User", new { userName = user.Login }) ">@user.Login</a><span>, </span>
                }
        }
    </div>
        </div>
        <div id="album-comments">
            
            @if (Model.CommentsAllow)
            {
            
                    <form class="form-horizontal" action="#" method="post">
                        <fieldset>
                            <div class="control-group">
                                <textarea class="input-xxlarge" id="comment-body" rows="3" placeholder="Enter your comment here..."></textarea>
                            </div>
                            <div class="control-group">
                                <button type="button" class="btn btn-primary" id="submit" onclick="false">
                                    Add comment</button>
                            </div>
                        </fieldset>
                    </form>
                    <h3>Comments:</h3><br/>
                    <div id="comments">
            
                        @if (Model.Comments.Count == 0)
                        {
                            <div class="album-comment" id="empty">
                                Nothing here! Be first and comment on this album!
                            </div>
                        }
                    
                        @foreach (PhotoHistory.Models.CommentModel comment in Model.Comments)
                        {
                            //Jesli user nie jest wlascicielem albumu lub komentarza i komentarz niezaakceptowany to nie wyswietlaj
                            if ( !(ViewBag.User.Id == Model.User.Id || ViewBag.User.Id == comment.User.Id ) && !comment.Accepted)
                            {
                                continue;
                            }
                            <div class="album-comment @((comment.Accepted??false)?"":"comment-pending-moderation")" id="@("comment" + comment.Id)">
                            <h1>
                                <a href = @Url.Action("ViewProfile", "User", new { userName = comment.User.Login }) name="@("comment" + comment.Id)">@comment.User.Login</a>
                                @comment.Date.ToString("dd/MM/yyyy HH:mm:ss")
                                <span class="comment-control">
                                    @if (ViewBag.User.Id == comment.User.Id || ViewBag.User.Id == Model.User.Id)
                                    {
                                        <span class="comment-admin label label-important" action="delete" comment="@comment.Id">
                                         <i class="icon-remove icon-white"></i> </span>
                                    }
                                    
                                    @if (ViewBag.User.Id == Model.User.Id && !comment.Accepted)
                                    {
                                        <span class="comment-admin label label-success" action="accept" comment="@comment.Id">
                                         <i class="icon-ok icon-white"></i> </span>
                                      
                                    }
                                </span>
                            
                            </h1>
                            @comment.Body
                        </div>
                        }
                    </div>
               
            }
            else
            { 
              <h3>Comments:</h3><br/> 
              <div class="comments-disabled">Comments are disabled for this album.</div>
            }
            </div>
        
    </div>
    <div id="content-right">
        <div id="map-canvas">
        </div>
    </div>
</div>
@section JS {
    <script type="text/javascript">
        

        //subskrypcje
        $(document).ready(function () {
            $('[name="follow_button"]').click(function () {
                    var val = $('[name="follow_button"]').val();
                    // Perform the ajax post
                    $.post("/Album/Subscribe", { "albumId": @Model.Id, "unsubscribe" :val },
                    function (data) {
                        if(data!=null){
                            if(data!="error"){
                                var button= $('[name="follow_button"]');
                                if(data[0]=="subscribed"){
                                    button.attr("class","btn btn-warning");
                                    button.attr("value","true");
                                    button.html('<i class="icon-remove icon-white"></i> Unfollow</button>');
                                } else {
                                    button.attr("class","btn btn-info");
                                    button.attr("value","false");
                                    button.html('<i class="icon-ok icon-white"></i> Follow</button>');
                                }
                            } else
                                alert(data[1]);
                        } else
                            alert("Error, wrong response from server. Try again later.");

                        
                    });
                    return false;
            });
        });

        //moderacja komentarza
        $(document).ready(function() {
            $('span[action="delete"]').click(deleteCommentFunction);
            $('span[action="accept"]').click(function() {
                var commentId = $(this).attr("comment");
                $.post("/Album/AcceptComment", { "id": commentId},
                    function (data) {
                        if(data[0]!="error"){
                            $('#comment'+commentId).removeClass("comment-pending-moderation");
                            var span= $('span[comment="'+commentId+'"]').filter('span[action="accept"]');
                            span.remove();
                        } 
                        else
                        {
                            alert(data[1]);
                        }
                    });
            });
        
        });

        function deleteCommentFunction(){
            var commentId = $(this).attr("comment");
                $.post("/Album/DeleteComment", { "id": commentId},
                    function (data) {
                        if(data[0]!="error"){
                            $('#comment'+commentId).remove();
                        } 
                        else
                        {
                            alert(data[1]);
                        }
                    });
          
        }


        //komentarze
        $(document).ready(function () {
            $("#submit").click(function () {
                    var val = document.getElementById("comment-body").value;
                    if(val==null || val==""){
                        alert("Your comment can't be empty");
                        return false;
                    }
                    
                    $("#submit").attr("class","btn btn-primary disabled");
                    $("#submit").attr("disabled","disabled");
                    $("#submit").html("Please wait");
                    // Perform the ajax post
                    $.post("/Album/Comment", { "id": @Model.Id, "comment" :val },
                    function (data) {
                        if(data.Body!=null){
                        $("#empty").remove();
                        $("#comment-body").val('');

                        var commentNode = $('<div></div>').addClass('album-comment').attr('id','comment'+data.Id);
                        if(!data.Accepted)
                            commentNode.addClass('comment-pending-moderation');
                        commentNode.prepend('<h1><a name="comment'+data.Id+'" href ="'+ data.Link + '"> ' + data.UserName + ' </a>' + data.Date +'<span class="comment-control">'+
                        
                        ' <span class="comment-admin label label-important" action="delete" comment="'+ data.Id + '" >'+
                                         '<i class="icon-remove icon-white"></i> </span></span></h1>\n'+data.Body);
 
                      $("#comments").prepend(commentNode);
                      //  $("#comments").prepend('<div class="album-comment">\n<h1><a name=comment'+data.Id+' href ="'+ data.Link + '" > ' + data.UserName + ' </a>'
                      //  +data.Date+'</h1>\n'+  data.Body+'</div>');
                       commentNode.find('span[action="delete"]').click(deleteCommentFunction);
                        $("#submit").attr("class","btn btn-primary");
                        $("#submit").removeAttr("disabled");
                        $("#submit").html("Add comment");
                        } else
                            alert(data.Message);
                    });
                    return false;
            });
        });

        // aktywacja pluginu
        $(document).ready(function () {
            $('ul#roundabout').roundabout({
                enableDrag: true,
                btnToggleAutoplay: ".toggle-autoplay",
                autoplayDuration: 1000
            });
        });

        
        // obsluga glosowania
        $(document).ready(function () {
            $(".vote").click(function () {
                    var up = $(this).attr("data-up");
                    // Perform the ajax post
                    $.post("/Album/Vote", { "id": @Model.Id, "up" : up},
                    function (data) {
                        // Successful requests get here
                        // Update the page elements
                        $(".album-rating").text(data[0])
                        alert(data[1])
                    });
                    return false;
            });
        });

        // obsluga zmiany obrazka - wazne
        $('#roundabout li').focus(function () {
            $('#photo-desc-replace').html('<h3>' + this.getAttribute('title') + '</h3>' + this.getAttribute('description'))
        });

        // funkcja obslugujaca przyciski nawigacyjne
        function move(days) {
            var closest_photo = 0
            var active_photo = $('ul#roundabout').roundabout('getChildInFocus')
            var photos = new Array()
            photos = $('#roundabout img')
            var d = new Date(photos[active_photo].getAttribute('date'))
            var desired_date = d.setDate(d.getDate() + days)
            console.log('desired :' + desired_date)
            photos.each(function (index, Element) {
                if (Math.abs(desired_date - new Date(Element.getAttribute('date'))) < Math.abs(desired_date - new Date(photos[closest_photo].getAttribute('date')))) {
                    closest_photo = index
                }
                else {
                    console.log(Element.getAttribute('date'))
                    console.log(Math.abs(desired_date - new Date(Element.getAttribute('date'))))
                    console.log(photos[closest_photo].getAttribute('date'))
                    console.log(Math.abs(desired_date - new Date(photos[closest_photo].getAttribute('date'))))
                }
            });
            //alert(closest_photo)
            //$('ul#roundabout').roundabout("animateToChild", closest_photo)
            var deg = 360 / photos.size()
            $('ul#roundabout').roundabout("animateToDelta", (active_photo - closest_photo) * deg)
        }
    </script>
    <script type="text/javascript">

        function CenterControl(controlDiv, map, bounds, center) {

          // Set CSS styles for the DIV containing the control
          // Setting padding to 5 px will offset the control
          // from the edge of the map.
          controlDiv.style.padding = '5px';

          // Set CSS for the control border.
          var controlUI = document.createElement('div');
          controlUI.style.backgroundColor = '#ffffee';
          controlUI.style.borderStyle = 'solid';
          controlUI.style.borderWidth = '2px';
          controlUI.style.cursor = 'pointer';
          controlUI.style.textAlign = 'center';
          controlUI.title = 'Click to set the map to Home';
          controlDiv.appendChild(controlUI);

          // Set CSS for the control interior.
          var controlText = document.createElement('div');
          controlText.style.fontFamily = 'Arial,sans-serif';
          controlText.style.fontSize = '12px';
          controlText.style.paddingLeft = '15px';
          controlText.style.paddingRight = '15px';
          controlText.style.color = 'black';
          controlText.innerHTML = '<strong>Center</strong>';
          controlUI.appendChild(controlText);

          // Setup the click event listeners: simply set the map to Chicago.
          google.maps.event.addDomListener(controlUI, 'click', function() {
            map.fitBounds(bounds);
            map.setCenter(center);
          });
        }

        function initializeMap() {
            console.log('initializeMap()');

            @{ bool hasGeoData = false; }

            @if (Model.Photos.Count() > 0)
            {
                <text>
                var myOptions = {
                    mapTypeId: google.maps.MapTypeId.HYBRID
                }
                var map = new google.maps.Map(document.getElementById("map-canvas"), myOptions);
                var markers = [];
                var bounds = new google.maps.LatLngBounds();
                </text>

                foreach (PhotoHistory.Models.PhotoModel photo in Model.Photos)
                {
                    if (photo.LocationLatitude.HasValue && photo.LocationLongitude.HasValue)
                    {
                        hasGeoData = true;

                        <text>
                        var marker = new google.maps.Marker({
                            position: new google.maps.LatLng(@photo.LocationLatitude.Value, @photo.LocationLongitude.Value),
                            map: map
                        });
                        markers.push(marker);
                        bounds.extend(marker.getPosition());
                        </text>
                    }
                }

                if (hasGeoData)
                {
                    <text>
                    map.fitBounds(bounds);
                    map.setCenter(bounds.getCenter());

                    var centerControlDiv = document.createElement('div');
                    var centerControl = new CenterControl(centerControlDiv, map, bounds, bounds.getCenter());

                    centerControlDiv.index = 1;
                    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(centerControlDiv);
                    </text>
                }
            }
            
            @if (!hasGeoData)
            {
               <text>
               var mapCanvas = document.getElementById("map-canvas");
               mapCanvas.innerHTML = '<div id="map-canvas-placeholder">No geographical data available</div>';
               </text> 
            }
        }

        function loadScript() {
            console.log('loadScript()');
            var script = document.createElement("script");
            script.type = "text/javascript";
            script.src = "http://maps.googleapis.com/maps/api/js?key=AIzaSyA1KTeO9Ixsb6_ysEwin8bf4r5G9Rm3GYc&sensor=false&callback=initializeMap";
            document.body.appendChild(script);
        }

        window.onload = loadScript;
    </script>
}
